#include "Jzon.h"
#include <iostream>

void parseNode(Jzon::Node & rootNode);
void parseObject(Jzon::Object & rootNode);
void parseArray(Jzon::Array & nodeArray);

int main()
{
        Jzon::Object rootNode;
        Jzon::FileReader::ReadFile("plays.json", rootNode);

	//parseNode(rootNode);
		
        /* for (Jzon::Object::iterator it = rootNode.begin(); it != rootNode.end(); ++it)
        {
                std::string name = (*it).first;
                Jzon::Node &node = (*it).second;
                        
                std::cout << name << " = ";
                if (node.IsValue()) {
                        std::cout << node.AsString();
                } else if (node.IsArray()) {
                        std::cout << "*Array*";
                } else if (node.IsObject()) {
                        std::cout << "*Object*";
				}
					
                std::cout << std::endl;
        }*/

	// Parse plays
        if (rootNode.Get("plays").IsArray())
        {
                Jzon::Array &nodeArray = rootNode.Get("plays").AsArray();

                for (Jzon::Array::iterator it = nodeArray.begin(); it != nodeArray.end(); ++it)
                {
			parseNode((*it));

                        /*//if ((*it).IsValue())
                                //std::cout << (*it).AsString() << std::endl;

			if ((*it).IsValue()) {
				std::cout << "value" << std::endl;
			}

			if ((*it).IsObject()) {
				std::cout << "obj" << std::endl;
			}

			if ((*it).IsArray()) {
				std::cout << "arr" << std::endl;
			}*/
                }
        } else {
		std::cout << "The beginning node must be a list of plays" << std::endl;
	}

        return 0;
}

void parseNode(Jzon::Node & rn)
{
	Jzon::Object rootNode = rn.AsObject();

	std::cout << "yeahhh" << std::endl;

	for(Jzon::Object::iterator it = rootNode.begin(); it != rootNode.end(); ++it)
        {
                std::string name = (*it).first;
                Jzon::Node &node = (*it).second;
                        
                std::cout << name << " = ";

                if (node.IsValue()) {
                        std::cout << node.AsString();
                } else if (node.IsArray()) {
                        std::cout << "*Array*";

			parseArray(node);

                } else if (node.IsObject()) {
                        std::cout << "*Object*";
		}
					
                std::cout << std::endl;
        }
}

void parseObject(Jzon::Object & rootNode)
{
	for(Jzon::Object::iterator it = rootNode.begin(); it != rootNode.end(); ++it)
        {
                std::string name = (*it).first;
                Jzon::Node &node = (*it).second;
                        
                std::cout << name << " = ";

                if (node.IsValue()) {
                        std::cout << node.AsString();
                } else if (node.IsArray()) {
                        std::cout << "*Array*";

			//parseNode(node.AsObject());
			//parseNode(obj);

			//parseArray(node);
                } else if (node.IsObject()) {
                        std::cout << "*Object*";

			//parseNode(node.AsObject());
		}
					
                std::cout << std::endl;
        }
}

void parseArray(Jzon::Object & rootNode) {
	Jzon::Array &nodeArray = rootNode.AsArray();
//void parseArray(Jzon::Array & nodeArray)
{
	for (Jzon::Array::iterator it = nodeArray.begin(); it != nodeArray.end(); ++it)
        {
                //std::cout << (*it).AsString() << std::endl;

		if ((*it).IsValue()) {
			std::cout << "value" << std::endl;
		}

		if ((*it).IsObject()) {
			std::cout << "obj" << std::endl;
		}

		if ((*it).IsArray()) {
			std::cout << "arr" << std::endl;
		}
	}
}
